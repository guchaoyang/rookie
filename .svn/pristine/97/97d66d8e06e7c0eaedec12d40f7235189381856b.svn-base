//
//  HTTPManager.m
//  shopping
//
//  Created by 成都牛牛优选信息科技有限公司 on 2018/1/4.
//  Copyright © 2018年 成都牛牛优选信息科技有限公司. All rights reserved.
//

#import "HTTPManager.h"
#import "HomeListModel.h"
#import "ActivityModel.h"

@implementation HTTPManager

+ (AFHTTPSessionManager *)httpManager{
    //获取请求对象
    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
    
    manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@"application/json", @"text/json", @"text/html", @"text/javascript",@"text/plain",nil];
    ((AFJSONResponseSerializer *)manager.responseSerializer).removesKeysWithNullValues = YES;
    // 设置返回格式
    manager.responseSerializer = [AFHTTPResponseSerializer serializer];
    // 设置请求格式 此处暂时不用加入多种限制 否则会报错
    manager.requestSerializer = [AFJSONRequestSerializer serializer];
    //    [manager.requestSerializer setValue:@"application/json" forHTTPHeaderField:@"Accept"];
    [manager.requestSerializer setValue:@"application/json; charset=utf-8" forHTTPHeaderField:@"Content-Type"];
    
    // 设置超时时间
    [manager.requestSerializer willChangeValueForKey:@"timeoutInterval"];
    manager.requestSerializer.timeoutInterval = 30;
    [manager.requestSerializer didChangeValueForKey:@"timeoutInterval"];
    
    return manager;
}

/**<
 查询系统时间 GET
 */
+ (void)getSystemTimeInfo:(void(^)(NSString *code, NSString *msg))block{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url,SYSTEM_TIME];
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"查询系统时间：%@",dicJson);
        if ([dicJson[@"code"] intValue ] == 200){
            
//            [Helper startTime:[dicJson[@"data"] longValue]];
            //存储服务器返回的时间
//            [UserDefaultUtil saveValue:dicJson[@"data"] forKey:SERVER_TIME];
            //取本地时间
            long localTime = [[NSDate date] timeIntervalSince1970]*1000;
            //计算差值
            long timeDifference = [dicJson[@"data"] longValue] - localTime;
            
            [UserDefaultUtil saveValue:[NSString stringWithFormat:@"%.0ld", timeDifference]  forKey:DIFFER_TIME];
            
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]));
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]));
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"查询系统时间错误信息：%@",error);
        
    }];
}
/**<
 首页推荐列表 GET
 */
+ (void)getHomeRecommedListInfo:(void(^)(NSString *code, NSString *msg, NSArray *result))block pageNum:(NSInteger)pageNum size:(NSString *)size{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@?p=%ld&s=%@",[BasicInfoClass shared].base_url, HOME_GOODS_RECOMMEND_LIST, pageNum, size];

    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull downloadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"首页推荐列表：%@",dicJson);
        if ([dicJson[@"code"] intValue ] == 200) {
            NSArray *data = dicJson[@"data"];
            NSMutableArray *dataArray = [NSMutableArray array];
            
            for (NSDictionary *dic in data) {
                HomeListModel *model = [[HomeListModel alloc] initWithDataDic:dic];
                [dataArray addObject:model];
            }
            
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]),dataArray);
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), nil);
        }
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"首页推荐列表错误信息：%@",error);
    }];
}


/**<
 首页banner GET
 */
+ (void)getHomeBannerInfo:(void(^)(NSString *code, NSString *msg, NSArray *result))block{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url,HOME_BANNER];
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"首页轮播：%@",dicJson);
        if ([dicJson[@"code"] intValue ] == 200){
            NSArray *data = dicJson[@"data"];
            NSMutableArray *dataArray = [NSMutableArray array];
            
            for (NSDictionary *dic in data) {
                HomeBannerModel *model = [[HomeBannerModel alloc] initWithDataDic:dic];
                [dataArray addObject:model];
            }
            
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]),dataArray);
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), nil);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"首页轮播错误信息：%@",error);

    }];
}


/**<
 全部商品（全网汇总） GET
 */
+ (void)getAllGoodsInfo:(void(^)(NSString *code, NSString *msg, NSArray *result))block pageNum:(NSInteger)pageNum size:(NSString *)size sort:(NSInteger)sort{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@?p=%ld&s=%@&sort=%ld",[BasicInfoClass shared].base_url, GOODS_DETAIL, pageNum, size, sort];
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"全网汇总：%@",dicJson);
        if ([dicJson[@"code"] intValue ] == 200){
            NSArray *data = dicJson[@"data"];
            NSMutableArray *dataArray = [NSMutableArray array];
            
            for (NSDictionary *dic in data) {
                HomeListModel *model = [[HomeListModel alloc] initWithDataDic:dic];
                [dataArray addObject:model];
            }
            
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]),dataArray);
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), nil);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"全网汇总错误信息：%@",error);
        
    }];
}
/**<
 商品详情 GET
 */
+ (void)getGoodsDetailInfo:(void(^)(NSString *code, NSString *msg, NSDictionary *dic))block goodsId:(NSString *)goodsId{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@/%@",[BasicInfoClass shared].base_url, GOODS_DETAIL, goodsId];
    if (TOKEN_ISEMPTY) {
    }else{
        //设置 请求头
        [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    }

    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull downloadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"商品详情：%@",dicJson);
        
        if ([dicJson[@"code"] intValue ] == 200){
            NSDictionary *data = dicJson[@"data"];
            
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]),data);
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), nil);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        block(@"1001", nil, nil);
        NSLog(@"商品详情错误信息：%@",error);
    }];
}


/**<
 商品详情图片 GET
 */
+ (void)getGoodsDetailImages:(void(^)(NSString *imageStr))block imagesLink:(NSString *)imagesLink{
    
    AFHTTPSessionManager *manager = [self httpManager];
    //商品图片
    [manager GET:imagesLink parameters:nil progress:^(NSProgress * _Nonnull downloadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"商品详情图片：%@",dicJson);
        NSArray *imageArr = dicJson[@"data"][@"images"];
        
        NSString *imagesString = @"";
        
        for (NSString *string in imageArr) {
            
            imagesString = [NSString stringWithFormat:@"%@<img src=\"%@\">", imagesString, string];
        }
        
        NSString *jsString = [NSString stringWithFormat:@"<html> \n"
                              "<head> \n"
                              "<style type=\"text/css\"> \n"
                              "body {font-size:15px;}\n"
                              //去除浏览器默认白边样式
                              "*{margin: 0;padding: 0;}\n"
                              //
                              "</style> \n"
                              //此处禁止手势缩放
                              "<meta name='viewport' content='width=device-width, initial-scale=1.0,maximum-scale=1.0, minimum-scale=1.0, user-scalable=no'>\n"
                              //
                              "</head> \n"
                              "<body>"
                              "<script type='text/javascript'>"
                              //此处注释 如果图片高度为 auto 详情界面计算高度 第二次会错误
//                              "window.onload = function(){\n"
//                              "var $img = document.getElementsByTagName('img');\n"
//                              "for(var p in  $img){\n"
//                              " $img[p].style.width = '100%%';\n"
//                              "$img[p].style.height ='auto'\n"
//                              "}\n"
//                              "}\n"
                              "</script>\n%@\n"
                              "</body>"
                              "</html>", imagesString];
        
        block(jsString);
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"商品详情图片错误信息：%@",error);

    }];
}

/**<
 9.9包邮 GET
 */
+ (void)getHomePostFreeListInfo:(void(^)(NSString *code, NSString *msg, NSArray *result))block price:(NSInteger)price pageNum:(NSInteger)pageNum size:(NSString *)size sort:(NSInteger)sort{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@/%ld?p=%ld&s=%@&sort=%ld",[BasicInfoClass shared].base_url, GOODS_SHIPPING, price, pageNum, size, sort];
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull downloadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"9.9包邮商品列表：%@",dicJson);
        if ([dicJson[@"code"] intValue ] == 200) {
            NSArray *data = dicJson[@"data"];
            NSMutableArray *dataArray = [NSMutableArray array];
            
            for (NSDictionary *dic in data) {
                HomeListModel *model = [[HomeListModel alloc] initWithDataDic:dic];
                [dataArray addObject:model];
            }
            
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]),dataArray);
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), nil);
        }
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"9.9包邮列表错误信息：%@",error);
        
    }];
}

/**<
 首页榜单 GET
 */
+ (void)getHomeRankListInfo:(void(^)(NSString *code, NSString *msg, NSArray *result))block pageNum:(NSInteger)pageNum size:(NSString *)size{
 
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@?p=%ld&s=%@",[BasicInfoClass shared].base_url, GOODS_RANK, pageNum, size];
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull downloadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"首页榜单：%@",dicJson);
        if ([dicJson[@"code"] intValue ] == 200) {
            NSArray *data = dicJson[@"data"];
            NSMutableArray *dataArray = [NSMutableArray array];
            
            for (NSDictionary *dic in data) {
                HomeListModel *model = [[HomeListModel alloc] initWithDataDic:dic];
                [dataArray addObject:model];
            }
            
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]),dataArray);
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), nil);
        }
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"首页榜单错误信息：%@",error);
        
    }];
}

/**<
 首页精选推送 GET
 */
+ (void)getHomeGoodsPushListInfo:(void(^)(NSString *code, NSString *msg, NSArray *result))block pageNum:(NSInteger)pageNum size:(NSString *)size{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@?p=%ld&s=%@",[BasicInfoClass shared].base_url, GOODS_PUSH, pageNum, size];
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull downloadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"首页精选推送：%@",dicJson);
        if ([dicJson[@"code"] intValue ] == 200) {
            NSArray *data = dicJson[@"data"];
            NSMutableArray *dataArray = [NSMutableArray array];
            
            for (NSDictionary *dic in data) {
                HomeListModel *model = [[HomeListModel alloc] initWithDataDic:dic];
                [dataArray addObject:model];
            }
            
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]),dataArray);
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), nil);
        }
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"首页精选推送错误信息：%@",error);
        
    }];
}
/**<
 首页主分类 GET level 分类层级（1主分类，2子分类）
 */
+ (void)getHomeMainCategoryInfo:(void(^)(NSString *code, NSString *msg, NSArray *result))block{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url, HOME_MAIN_CATEGORY];
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull downloadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"首页主分类：%@",dicJson);
        if ([dicJson[@"code"] intValue ] == 200) {
            NSArray *data = dicJson[@"data"];
            NSMutableArray *dataArray = [NSMutableArray array];
            
            for (NSDictionary *dic in data) {
                HomeCatetoryModel *model = [[HomeCatetoryModel alloc] initWithDataDic:dic];
                [dataArray addObject:model];
            }
            
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]),dataArray);
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), nil);
        }
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"首页主分类错误信息：%@",error);
    }];
}

/**<
 查询指定主分类下所有商品列表 GET
 1：默认排序，2：按销量降序，3：按价格升序，4：按价格降序，5：按人气（收藏数）降序
 */
+ (void)getHomeMainCategoryListInfo:(void(^)(NSString *code, NSString *msg, NSArray *result))block category:(NSString *)category pageNum:(NSInteger)pageNum size:(NSString *)size sort:(NSInteger)sort{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@/%@?p=%ld&s=%@&sort=%ld",[BasicInfoClass shared].base_url, GOODS_CATEGORY, category, pageNum, size, sort];
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull downloadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"主分类下所有商品列表：%@",dicJson);
        if ([dicJson[@"code"] intValue ] == 200) {
            NSArray *data = dicJson[@"data"];
            NSMutableArray *dataArray = [NSMutableArray array];
            
            for (NSDictionary *dic in data) {
                HomeListModel *model = [[HomeListModel alloc] initWithDataDic:dic];
                [dataArray addObject:model];
            }
            
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]),dataArray);
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), nil);
        }
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"主分类下所有商品列表错误信息：%@",error);
        
    }];
}

/**<
 商品搜索结果 GET
 */
+ (void)getSearchResultInfo:(void(^)(NSString *code, NSString *msg, NSArray *result))block keywords:(NSString *)Keywords pageNum:(NSInteger)pageNum size:(NSString *)size sort:(NSInteger)sort{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@?w=%@&p=%ld&s=%@&sort=%ld",[BasicInfoClass shared].base_url, GOODS_SEARCH, Keywords, pageNum, size, sort];
    //这里的关键词含有中文 url需要解码
    NSString *decodingUrl = [urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    
    [manager GET:decodingUrl parameters:nil progress:^(NSProgress * _Nonnull downloadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"商品搜索结果：%@",dicJson);
        if ([dicJson[@"code"] intValue ] == 200) {
            NSArray *data = dicJson[@"data"];
            NSMutableArray *dataArray = [NSMutableArray array];
            
            for (NSDictionary *dic in data) {
                HomeListModel *model = [[HomeListModel alloc] initWithDataDic:dic];
                [dataArray addObject:model];
            }
            
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]),dataArray);
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), nil);
        }
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"商品搜索结果错误信息：%@",error);
        
    }];
}


/**<
 查询全部活动列表 GET
 */
+ (void)getActivityListInfo:(void(^)(NSString *code, NSString *msg, NSArray *result))block{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url,ACTIVITY_LIST];
    if (TOKEN_ISEMPTY) {
        
    }else{
        [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    }
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"活动列表：%@",dicJson);
        if ([dicJson[@"code"] intValue ] == 200){
            NSArray *data = dicJson[@"data"];
            NSMutableArray *dataArray = [NSMutableArray array];
            
            for (NSDictionary *dic in data) {
                ActivityModel *model = [[ActivityModel alloc] initWithDataDic:dic];
                [dataArray addObject:model];
            }
            
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]),dataArray);
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), nil);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"活动列表错误信息：%@",error);
        
    }];
}


/**<
 活动点赞 POST
 */
+ (void)postActivityLike:(void(^)(NSString *code, NSString *msg, NSString *result))block activityId:(NSString *)activityId{
    AFHTTPSessionManager *manager = [self httpManager];
    
    //设置 请求头
    [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@/%@",[BasicInfoClass shared].base_url, ACTIVITY_LIST, activityId];
    
    [manager POST:urlStr parameters:nil progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"活动点赞：%@",dicJson);
        block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]),StringFormat(dicJson[@"data"]));
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"活动点赞错误信息：%@",error);
    }];
}

/**<
 活动取消点赞 DELETE
 */
+ (void)deleteActivityCancelLike:(void(^)(NSString *code, NSString *msg, NSString *result))block activityId:(NSString *)activityId{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    //设置 请求头
    [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@/%@",[BasicInfoClass shared].base_url, ACTIVITY_LIST, activityId];
    
    [manager DELETE:urlStr parameters:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"活动取消点赞：%@",dicJson);
        block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]),StringFormat(dicJson[@"data"]));
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"活动取消点赞错误信息：%@",error);
    }];
}


/**<
 增加访问次数 PUT
 */
+ (void)addActivityFoot:(void(^)(NSString *code, NSString *msg, id result))block activityId:(NSString *)activityId{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@/%@",[BasicInfoClass shared].base_url, ACTIVITY_FOOT, activityId];
    
    //设置 请求头
    [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    
    [manager PUT:urlStr parameters:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"增加访问次数：%@",dicJson);
        block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]) ,StringFormat(dicJson[@"data"]));
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"增加访问次数错误信息：%@",error);
    }];
}
/**<
 发送短信获取验证码 POST
 */
+ (void)loginSendSMS:(void(^)(NSString *code, NSString *msg, NSString *data))block phoneNum:(NSString *)phoneNum{
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url, LOGIN_SMS];
    
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    
    [dict setObject:[Helper TripleDES:phoneNum :0] forKey:@"mobile"];//手机号加密
    
    [manager POST:urlStr parameters:dict progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"发送短信获取验证码：%@",dicJson);
        
        block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]),StringFormat(dicJson[@"data"]));
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"发送短信获取验证码错误信息：%@",error);
        
    }];
}

/**<
 登录 POST
 */
+ (void)loginRequest:(void(^)(NSString *code, NSString *msg, id result))block phoneNum:(NSString *)phoneNum code:(NSString *)code{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url, LOGIN_CODE];
    
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    
    [dict setValue:phoneNum forKey:@"mobile"];
    [dict setValue:code forKey:@"code"];
    
    [manager POST:urlStr parameters:dict progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"登录：%@",dicJson);
        block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]) ,dicJson[@"data"]);
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"登录错误信息：%@",error);
    }];
}


/**<
 修改密码获取验证码 GET
 */
+ (void)changePasswordSMS:(void(^)(NSString *code, NSString *msg, NSString *data))block phoneNum:(NSString *)phoneNum{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@/%@",[BasicInfoClass shared].base_url, USER_PASSWORD_SMS, phoneNum];
    
    //设置 请求头
    [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"修改密码获取验证码：%@",dicJson);
        
        block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]),StringFormat(dicJson[@"data"]));
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"修改密码获取验证码错误信息：%@",error);
        
    }];
}

/**<
 修改密码 PUT
 */
+ (void)changePassword:(void(^)(NSString *code, NSString *msg ,id result))block phoneNum:(NSString *)phoneNum password:(NSString *)password code:(NSString *)code{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url, USER_PASSWORD];
    
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    
    [dict setValue:phoneNum forKey:@"mobile"];
    [dict setValue:password forKey:@"password"];
    [dict setValue:code forKey:@"code"];
    NSLog(@"修改密码请求数据%@",dict);
    
    //设置 请求头
    [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    
    [manager PUT:urlStr parameters:dict success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"修改密码：%@",dicJson);
        block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]) ,StringFormat(dicJson[@"data"]));
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"修改密码错误信息：%@",error);
    }];
}

/**<
 获取用户信息 GET
 */
+ (void)getUserInfo:(void(^)(NSString *code, NSString *msg ,NSDictionary *result))block{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url, USER_INFO];
    
    //设置 请求头
    [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"获取用户信息：%@",dicJson);
        
        block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), dicJson[@"data"]);
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"获取用户信息错误信息：%@",error);
        
    }];
}


/**<
 账号密码登录 POST
 */
+ (void)accountPasswordLoginRequest:(void(^)(NSString *code, NSString *msg ,id result))block phoneNum:(NSString *)phoneNum password:(NSString *)password{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url, LOGIN_PASS];
    
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    
    [dict setValue:phoneNum forKey:@"mobile"];
    [dict setValue:password forKey:@"password"];
    NSLog(@"账号密码登录请求数据%@",dict);
    [manager POST:urlStr parameters:dict progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"账号密码登录：%@",dicJson);
        block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]) ,dicJson[@"data"]);
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"账号密码登录错误信息：%@",error);
    }];
}


/**<
 查询收藏状态(GET) type:0
 添加收藏(POST)   type:1
 取消收藏(DELETE) type:2
 */
+ (void)goodsCollectionRelatedRequest:(void(^)(NSString *code, NSString *msg ,id result))block goodsId:(NSString *)goodsId type:(NSInteger)type{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@/%@",[BasicInfoClass shared].base_url, GOODS_STAR, goodsId];
    //设置 请求头
    [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    
    if (type == 0) {
        //查询收藏状态
        [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull uploadProgress) {
            
        } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
            NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
            NSLog(@"查询收藏状态：%@",dicJson);
            
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), dicJson[@"data"]);
            
        } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
            NSLog(@"查询收藏状态错误信息：%@",error);
            
        }];
    }else if (type == 1){
        //添加收藏
        NSString *addUrlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url, GOODS_STAR];
        NSMutableDictionary *dict = [NSMutableDictionary dictionary];
        [dict setValue:goodsId  forKey:@"goodsId"];
        
        [manager POST:addUrlStr parameters:dict progress:^(NSProgress * _Nonnull uploadProgress) {
            
        } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
            NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
            NSLog(@"添加收藏：%@",dicJson);
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]) ,dicJson[@"data"]);
        } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
            NSLog(@"添加收藏错误信息：%@",error);
        }];
    }else{
        //取消收藏
        [manager DELETE:urlStr parameters:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
            NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
            NSLog(@"取消收藏：%@",dicJson);
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]),dicJson[@"data"]);
        } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
            NSLog(@"取消收藏错误信息：%@",error);
        }];
    }
}


/**<
 收藏商品列表 GET
 */
+ (void)getGoodsCollectionList:(void(^)(NSString *code, NSString *msg ,NSArray *result))block pageNum:(NSInteger)pageNum size:(NSString *)size{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@?p=%ld&s=%@",[BasicInfoClass shared].base_url, GOODS_STAR, pageNum, size];
    //设置 请求头
    [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull downloadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"收藏商品列表：%@",dicJson);
        if ([dicJson[@"code"] intValue ] == 200) {
            NSArray *data = dicJson[@"data"];
            NSMutableArray *dataArray = [NSMutableArray array];
            
            for (NSDictionary *dic in data) {
                HomeListModel *model = [[HomeListModel alloc] initWithDataDic:dic];
                [dataArray addObject:model];
            }
            
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]),dataArray);
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), nil);
        }
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"收藏商品列表错误信息：%@",error);
        
    }];
}

/**<
 热门搜索标签 GET
 */
+ (void)getGoodsHotSearchTags:(void(^)(NSString *code, NSString *msg ,NSArray *result))block{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url, GOODS_SEARCH_KEYS];
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"热门搜索标签：%@",dicJson);
        
        block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), dicJson[@"data"]);
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"热门搜索标签错误信息：%@",error);
        
    }];
}

/**<
 浏览记录 GET
 */
+ (void)getUserVisitListInfo:(void(^)(NSString *code, NSString *msg, NSArray *result))block pageNum:(NSInteger)pageNum size:(NSString *)size{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@?p=%ld&s=%@",[BasicInfoClass shared].base_url, GOODS_USER_VISIT, pageNum, size];
    //设置 请求头
    [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull downloadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"浏览记录：%@",dicJson);
        if ([dicJson[@"code"] intValue ] == 200) {
            NSArray *data = dicJson[@"data"];
            NSMutableArray *dataArray = [NSMutableArray array];
            
            for (NSDictionary *dic in data) {
                HomeListModel *model = [[HomeListModel alloc] initWithDataDic:dic];
                [dataArray addObject:model];
            }
            
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]),dataArray);
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), nil);
        }
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"浏览记录错误信息：%@",error);
        
    }];
}

/**<
 商品数量汇总 GET
 */
+ (void)getHomeGoodsTotalInfo:(void(^)(NSString *code, NSString *msg, NSDictionary *result))block{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url,GOODS_TOTAL];
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"商品数量汇总：%@",dicJson);
        if ([dicJson[@"code"] intValue ] == 200){
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]) ,dicJson[@"data"]);
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), nil);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"商品数量汇总错误信息：%@",error);
        
    }];
}

/**<
 修改用户信息 PUT
 0 昵称
 1 性别
 2 QQ
 */
+ (void)changeUserInfo:(void(^)(NSString *code, NSString *msg, id result))block value:(id)value type:(NSInteger)type{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url,USER_INFO];
    //设置 请求头
    [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    
    if (type == 0) {
        //昵称
        [dict setObject:value forKey:@"nickName"];
    }else if (type == 1){
        //性别
        [dict setObject:value forKey:@"sex"];
    }else if (type == 2){
        //QQ
        [dict setObject:value forKey:@"qq"];
    }
    
    [manager PUT:urlStr parameters:dict success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"修改用户信息：%@",dicJson);
        if ([dicJson[@"code"] intValue ] == 200){
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]) ,dicJson[@"data"]);
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), nil);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"修改用户信息错误信息：%@",error);
    }];
}


/**<
 提交意见反馈 POST
 */
+ (void)postFeedbackInfo:(void(^)(NSString *code, NSString *msg, id result))block content:(NSString *)content{
    
    AFHTTPSessionManager *manager = [self httpManager];
    //设置 请求头
    [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url, USER_FEEDBACK];
    
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    
    [dict setObject:content forKey:@"content"];
    
    NSLog(@"意见反馈请求数据%@",dict);
    
    [manager POST:urlStr parameters:dict progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"意见反馈：%@",dicJson);
        block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]) ,dicJson[@"data"]);
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"意见反馈错误信息：%@",error);
    }];
}

/**<
 获取推广链接 GET
 */
+ (void)getShareUrl:(void(^)(NSString *code, NSString *msg, id result))block{
    
    AFHTTPSessionManager *manager = [self httpManager];
    //设置 请求头
    [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url,SHARE_URL];
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"获取推广链接：%@",dicJson);
        if ([dicJson[@"code"] intValue ] == 200){
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]) ,dicJson[@"data"]);
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), nil);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"获取推广链接错误信息：%@",error);
        
    }];
}


/**<
 获取分享的网络图片地址 GET
 */
+ (void)getShareNetImage:(void(^)(NSString *code, NSString *msg, id result))block{
    
    AFHTTPSessionManager *manager = [self httpManager];
    //设置 请求头
    [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url,SHARE_IMAGE];
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"获取分享的网络图片url：%@",dicJson);
        if ([dicJson[@"code"] intValue ] == 200){
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]) ,dicJson[@"data"]);
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), nil);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"获取分享的网络图片url错误信息：%@",error);
        
    }];
}

/**<
 获取系统消息 GET
 */
+ (void)getMessageSystem:(void(^)(NSString *code, NSString *msg, NSArray *result))block pageNum:(NSInteger)pageNum size:(NSString *)size{
 
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@?p=%ld&s=%@",[BasicInfoClass shared].base_url, MESSAGE_SYS, pageNum, size];
    
    if (TOKEN_ISEMPTY) {
        
    }else{
        //设置 请求头
        [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    }
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull downloadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"系统消息列表：%@",dicJson);
        if ([dicJson[@"code"] intValue ] == 200) {
            NSArray *data = dicJson[@"data"];
            NSMutableArray *dataArray = [NSMutableArray array];
            
            for (NSDictionary *dic in data) {
                SysMessageModel *model = [[SysMessageModel alloc] initWithDataDic:dic];
                [dataArray addObject:model];
            }
            
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]),dataArray);
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), nil);
        }
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"系统消息列表错误信息：%@",error);
        
    }];
}

/**<
 上传头像 POST
 */
+ (void)uploadUserHead:(void(^)(NSString *code, NSString *msg, id result))block image:(UIImage *)image{
    
    AFHTTPSessionManager *manager = [self httpManager];
    //设置 请求头
    [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url,UPLOAD_USERHEAD];
    
    [manager POST:urlStr parameters:nil constructingBodyWithBlock:^(id<AFMultipartFormData>  _Nonnull formData) {
        NSData *imageData = UIImageJPEGRepresentation(image, 0.1f);//压缩图片
        //        NSData *imageData = UIImagePNGRepresentation(image);
        
        // 在网络开发中，上传文件时，是文件不允许被覆盖，文件重名  要解决此问题 可以在上传时使用当前的系统事件作为文件名
        //        NSString *fileName = [[Helper fourteenBitsTimeStamp] stringByAppendingString:@".jpg"];
        NSString *fileName = [NSString stringWithFormat:@"%@.jpg", [Helper fourteenBitsTimeStamp]];
        /*
         此方法参数
         1. 要上传的[二进制数据]
         2. 对应网站上[upload.php中]处理文件的[字段"file"]
         3. 要保存在服务器上的[文件名]
         4. 上传文件的[mimeType]
         */
        [formData appendPartWithFileData:imageData name:@"photo" fileName:fileName mimeType:@"image/jpg"];
        
    } progress:^(NSProgress * _Nonnull uploadProgress) {
        //打印下上传进度
        NSLog(@"%lf",1.0 *uploadProgress.completedUnitCount / uploadProgress.totalUnitCount);
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        
        NSLog(@"上传头像%@",dicJson);
        
        block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), dicJson[@"data"]);
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"上传头像错误信息：%@",error);
    }];
}


/**<
 检查最新版本号 GET
 */
+ (void)checkAppVersion:(void(^)(NSString *code, NSString *msg, id result))block{
    
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url, CHECK_VERSION];
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull downloadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"检查最新版本号：%@",dicJson);
        
        block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), dicJson[@"data"]);
        
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"检查最新版本号：%@",error);
        
    }];
}

/**<
 发送友盟推送设备号 POST
 */
+ (void)postUMengPushDeviceToken:(void(^)(NSString *code, NSString *msg, id result))block deviceToken:(NSString *)deviceToken{
    AFHTTPSessionManager *manager = [self httpManager];
    if (TOKEN_ISEMPTY) {
        
    }else{
        //设置 请求头
        [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    }
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url, POST_UMENGPUSH_DEVICETOKEN];
    
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    
    [dict setObject:deviceToken forKey:@"deviceToken"];
        
    [manager POST:urlStr parameters:dict progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"发送友盟推送设备号：%@",dicJson);
        block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]) ,dicJson[@"data"]);
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"发送友盟推送设备号错误信息：%@",error);
    }];
}


/**<
 淘宝订单自动兑换金币 PUT
 状态码 - 401 未授权
 状态码 - 40302 淘宝认证失败
 */
+ (void)orderExchangeGold:(void(^)(NSString *code, NSString *msg, id result))block deviceId:(NSString *)deviceId{
    AFHTTPSessionManager *manager = [self httpManager];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url, ORDER_INTEGRAL];
    
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    
    [dict setValue:deviceId forKey:@"deviceId"];
    
    NSLog(@"兑换金币请求数据%@",dict);
    
    //设置 请求头
    [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    
    [manager PUT:urlStr parameters:dict success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"兑换金币：%@",dicJson);
        if ([dicJson[@"code"] intValue] == 200) {
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]) ,StringFormat(dicJson[@"data"]));
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]) ,nil);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"兑换金币错误信息：%@",error);
    }];
}


/**<
 保存淘宝授权信息 POST
 deviceId    UUID
 tbOpenId    淘宝openID
 tbSessionId 淘宝topAccessToken
 tbNick      淘宝昵称
 */
+ (void)saveTaobaoAuthInfo:(void(^)(NSString *code, NSString *msg, id result))block deviceId:(NSString *)deviceId tbOpenId:(NSString *)tbOpenId tbSessionId:(NSString *)tbSessionId tbNick:(NSString *)tbNick{
    AFHTTPSessionManager *manager = [self httpManager];
    
    [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    
    NSString *urlStr = [NSString stringWithFormat:@"%@%@",[BasicInfoClass shared].base_url, USEFR_TAOBAO];
    
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    
    [dict setObject:deviceId forKey:@"deviceId"];
    [dict setObject:tbOpenId forKey:@"tbOpenId"];
    [dict setObject:tbSessionId forKey:@"tbSessionId"];
    [dict setObject:tbNick forKey:@"tbNick"];
    
    [manager POST:urlStr parameters:dict progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"保存淘宝授权信息：%@",dicJson);
        if ([dicJson[@"code"] intValue] == 200) {
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]) ,StringFormat(dicJson[@"data"]));
        }else if([dicJson[@"code"] intValue] == 401){
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]) ,nil);
        }else if([dicJson[@"code"] intValue] == 40302){
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]) ,nil);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"保存淘宝授权信息错误信息：%@",error);
    }];
}

/**<
 查询按钮是否可用 GET
 */
+ (void)querySysBtnStatus:(void(^)(NSString *code, NSString *msg, id result))block{
    AFHTTPSessionManager *manager = [self httpManager];
    //查询金币兑换按钮是否显示
    NSString *urlStr = [NSString stringWithFormat:@"%@%@/put_order_integral",[BasicInfoClass shared].base_url, SYS_BTN_STATUS];
    
    if (TOKEN_ISEMPTY) {
        
    }else{
        [manager.requestSerializer setValue:[Helper createRequestHeadString] forHTTPHeaderField:@"auth"];
    }
    
    [manager GET:urlStr parameters:nil progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dicJson=[NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        NSLog(@"查询按钮是否可用：%@",dicJson);
        if ([dicJson[@"code"] intValue ] == 200){
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]) ,dicJson[@"data"]);
        }else{
            block(StringFormat(dicJson[@"code"]), StringFormat(dicJson[@"msg"]), nil);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"查询按钮是否可用错误信息：%@",error);
        
    }];
}

@end
